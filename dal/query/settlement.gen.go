// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"singo/dal/sql_model"
)

func newSettlement(db *gorm.DB, opts ...gen.DOOption) settlement {
	_settlement := settlement{}

	_settlement.settlementDo.UseDB(db, opts...)
	_settlement.settlementDo.UseModel(&sql_model.Settlement{})

	tableName := _settlement.settlementDo.TableName()
	_settlement.ALL = field.NewAsterisk(tableName)
	_settlement.ID = field.NewInt64(tableName, "id")
	_settlement.SettlementNo = field.NewString(tableName, "settlement_no")
	_settlement.CustomerID = field.NewInt64(tableName, "customer_id")
	_settlement.SupplierID = field.NewInt64(tableName, "supplier_id")
	_settlement.StartDate = field.NewTime(tableName, "start_date")
	_settlement.EndDate = field.NewTime(tableName, "end_date")
	_settlement.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_settlement.PlatformFee = field.NewFloat64(tableName, "platform_fee")
	_settlement.SupplierAmount = field.NewFloat64(tableName, "supplier_amount")
	_settlement.VerifyCount = field.NewInt32(tableName, "verify_count")
	_settlement.Status = field.NewInt32(tableName, "status")
	_settlement.PaymentTime = field.NewTime(tableName, "payment_time")
	_settlement.PaymentProof = field.NewString(tableName, "payment_proof")
	_settlement.Remark = field.NewString(tableName, "remark")
	_settlement.CreateUser = field.NewInt64(tableName, "create_user")
	_settlement.CreateTime = field.NewTime(tableName, "create_time")
	_settlement.UpdateTime = field.NewTime(tableName, "update_time")

	_settlement.fillFieldMap()

	return _settlement
}

type settlement struct {
	settlementDo settlementDo

	ALL            field.Asterisk
	ID             field.Int64
	SettlementNo   field.String
	CustomerID     field.Int64 // ID
	SupplierID     field.Int64 // ID
	StartDate      field.Time
	EndDate        field.Time
	TotalAmount    field.Float64
	PlatformFee    field.Float64
	SupplierAmount field.Float64
	VerifyCount    field.Int32
	Status         field.Int32 // 0: 1: 2: 3:
	PaymentTime    field.Time
	PaymentProof   field.String
	Remark         field.String
	CreateUser     field.Int64
	CreateTime     field.Time
	UpdateTime     field.Time

	fieldMap map[string]field.Expr
}

func (s settlement) Table(newTableName string) *settlement {
	s.settlementDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s settlement) As(alias string) *settlement {
	s.settlementDo.DO = *(s.settlementDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *settlement) updateTableName(table string) *settlement {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SettlementNo = field.NewString(table, "settlement_no")
	s.CustomerID = field.NewInt64(table, "customer_id")
	s.SupplierID = field.NewInt64(table, "supplier_id")
	s.StartDate = field.NewTime(table, "start_date")
	s.EndDate = field.NewTime(table, "end_date")
	s.TotalAmount = field.NewFloat64(table, "total_amount")
	s.PlatformFee = field.NewFloat64(table, "platform_fee")
	s.SupplierAmount = field.NewFloat64(table, "supplier_amount")
	s.VerifyCount = field.NewInt32(table, "verify_count")
	s.Status = field.NewInt32(table, "status")
	s.PaymentTime = field.NewTime(table, "payment_time")
	s.PaymentProof = field.NewString(table, "payment_proof")
	s.Remark = field.NewString(table, "remark")
	s.CreateUser = field.NewInt64(table, "create_user")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *settlement) WithContext(ctx context.Context) *settlementDo {
	return s.settlementDo.WithContext(ctx)
}

func (s settlement) TableName() string { return s.settlementDo.TableName() }

func (s settlement) Alias() string { return s.settlementDo.Alias() }

func (s settlement) Columns(cols ...field.Expr) gen.Columns { return s.settlementDo.Columns(cols...) }

func (s *settlement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *settlement) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["settlement_no"] = s.SettlementNo
	s.fieldMap["customer_id"] = s.CustomerID
	s.fieldMap["supplier_id"] = s.SupplierID
	s.fieldMap["start_date"] = s.StartDate
	s.fieldMap["end_date"] = s.EndDate
	s.fieldMap["total_amount"] = s.TotalAmount
	s.fieldMap["platform_fee"] = s.PlatformFee
	s.fieldMap["supplier_amount"] = s.SupplierAmount
	s.fieldMap["verify_count"] = s.VerifyCount
	s.fieldMap["status"] = s.Status
	s.fieldMap["payment_time"] = s.PaymentTime
	s.fieldMap["payment_proof"] = s.PaymentProof
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["create_user"] = s.CreateUser
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s settlement) clone(db *gorm.DB) settlement {
	s.settlementDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s settlement) replaceDB(db *gorm.DB) settlement {
	s.settlementDo.ReplaceDB(db)
	return s
}

type settlementDo struct{ gen.DO }

func (s settlementDo) Debug() *settlementDo {
	return s.withDO(s.DO.Debug())
}

func (s settlementDo) WithContext(ctx context.Context) *settlementDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s settlementDo) ReadDB() *settlementDo {
	return s.Clauses(dbresolver.Read)
}

func (s settlementDo) WriteDB() *settlementDo {
	return s.Clauses(dbresolver.Write)
}

func (s settlementDo) Session(config *gorm.Session) *settlementDo {
	return s.withDO(s.DO.Session(config))
}

func (s settlementDo) Clauses(conds ...clause.Expression) *settlementDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s settlementDo) Returning(value interface{}, columns ...string) *settlementDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s settlementDo) Not(conds ...gen.Condition) *settlementDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s settlementDo) Or(conds ...gen.Condition) *settlementDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s settlementDo) Select(conds ...field.Expr) *settlementDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s settlementDo) Where(conds ...gen.Condition) *settlementDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s settlementDo) Order(conds ...field.Expr) *settlementDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s settlementDo) Distinct(cols ...field.Expr) *settlementDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s settlementDo) Omit(cols ...field.Expr) *settlementDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s settlementDo) Join(table schema.Tabler, on ...field.Expr) *settlementDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s settlementDo) LeftJoin(table schema.Tabler, on ...field.Expr) *settlementDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s settlementDo) RightJoin(table schema.Tabler, on ...field.Expr) *settlementDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s settlementDo) Group(cols ...field.Expr) *settlementDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s settlementDo) Having(conds ...gen.Condition) *settlementDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s settlementDo) Limit(limit int) *settlementDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s settlementDo) Offset(offset int) *settlementDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s settlementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *settlementDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s settlementDo) Unscoped() *settlementDo {
	return s.withDO(s.DO.Unscoped())
}

func (s settlementDo) Create(values ...*sql_model.Settlement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s settlementDo) CreateInBatches(values []*sql_model.Settlement, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s settlementDo) Save(values ...*sql_model.Settlement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s settlementDo) First() (*sql_model.Settlement, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Settlement), nil
	}
}

func (s settlementDo) Take() (*sql_model.Settlement, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Settlement), nil
	}
}

func (s settlementDo) Last() (*sql_model.Settlement, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Settlement), nil
	}
}

func (s settlementDo) Find() ([]*sql_model.Settlement, error) {
	result, err := s.DO.Find()
	return result.([]*sql_model.Settlement), err
}

func (s settlementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sql_model.Settlement, err error) {
	buf := make([]*sql_model.Settlement, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s settlementDo) FindInBatches(result *[]*sql_model.Settlement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s settlementDo) Attrs(attrs ...field.AssignExpr) *settlementDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s settlementDo) Assign(attrs ...field.AssignExpr) *settlementDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s settlementDo) Joins(fields ...field.RelationField) *settlementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s settlementDo) Preload(fields ...field.RelationField) *settlementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s settlementDo) FirstOrInit() (*sql_model.Settlement, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Settlement), nil
	}
}

func (s settlementDo) FirstOrCreate() (*sql_model.Settlement, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Settlement), nil
	}
}

func (s settlementDo) FindByPage(offset int, limit int) (result []*sql_model.Settlement, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s settlementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s settlementDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s settlementDo) Delete(models ...*sql_model.Settlement) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *settlementDo) withDO(do gen.Dao) *settlementDo {
	s.DO = *do.(*gen.DO)
	return s
}
