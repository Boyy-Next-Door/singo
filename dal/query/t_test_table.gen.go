// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"singo/dal/sql_model"
)

func newTTestTable(db *gorm.DB, opts ...gen.DOOption) tTestTable {
	_tTestTable := tTestTable{}

	_tTestTable.tTestTableDo.UseDB(db, opts...)
	_tTestTable.tTestTableDo.UseModel(&sql_model.TTestTable{})

	tableName := _tTestTable.tTestTableDo.TableName()
	_tTestTable.ALL = field.NewAsterisk(tableName)
	_tTestTable.ID = field.NewInt32(tableName, "id")
	_tTestTable.Name = field.NewString(tableName, "name")
	_tTestTable.Age = field.NewInt32(tableName, "age")
	_tTestTable.Salary = field.NewFloat64(tableName, "salary")
	_tTestTable.IsActive = field.NewBool(tableName, "is_active")
	_tTestTable.BirthDate = field.NewTime(tableName, "birth_date")
	_tTestTable.StartTime = field.NewTime(tableName, "start_time")
	_tTestTable.RegistrationDatetime = field.NewTime(tableName, "registration_datetime")
	_tTestTable.Details = field.NewString(tableName, "details")
	_tTestTable.Status = field.NewString(tableName, "status")
	_tTestTable.CreatedAt = field.NewTime(tableName, "created_at")
	_tTestTable.DeletedAt = field.NewField(tableName, "deleted_at")

	_tTestTable.fillFieldMap()

	return _tTestTable
}

type tTestTable struct {
	tTestTableDo tTestTableDo

	ALL                  field.Asterisk
	ID                   field.Int32
	Name                 field.String
	Age                  field.Int32
	Salary               field.Float64
	IsActive             field.Bool
	BirthDate            field.Time
	StartTime            field.Time
	RegistrationDatetime field.Time
	Details              field.String
	Status               field.String
	CreatedAt            field.Time
	DeletedAt            field.Field

	fieldMap map[string]field.Expr
}

func (t tTestTable) Table(newTableName string) *tTestTable {
	t.tTestTableDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTestTable) As(alias string) *tTestTable {
	t.tTestTableDo.DO = *(t.tTestTableDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTestTable) updateTableName(table string) *tTestTable {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Age = field.NewInt32(table, "age")
	t.Salary = field.NewFloat64(table, "salary")
	t.IsActive = field.NewBool(table, "is_active")
	t.BirthDate = field.NewTime(table, "birth_date")
	t.StartTime = field.NewTime(table, "start_time")
	t.RegistrationDatetime = field.NewTime(table, "registration_datetime")
	t.Details = field.NewString(table, "details")
	t.Status = field.NewString(table, "status")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tTestTable) WithContext(ctx context.Context) *tTestTableDo {
	return t.tTestTableDo.WithContext(ctx)
}

func (t tTestTable) TableName() string { return t.tTestTableDo.TableName() }

func (t tTestTable) Alias() string { return t.tTestTableDo.Alias() }

func (t tTestTable) Columns(cols ...field.Expr) gen.Columns { return t.tTestTableDo.Columns(cols...) }

func (t *tTestTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTestTable) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["age"] = t.Age
	t.fieldMap["salary"] = t.Salary
	t.fieldMap["is_active"] = t.IsActive
	t.fieldMap["birth_date"] = t.BirthDate
	t.fieldMap["start_time"] = t.StartTime
	t.fieldMap["registration_datetime"] = t.RegistrationDatetime
	t.fieldMap["details"] = t.Details
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tTestTable) clone(db *gorm.DB) tTestTable {
	t.tTestTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tTestTable) replaceDB(db *gorm.DB) tTestTable {
	t.tTestTableDo.ReplaceDB(db)
	return t
}

type tTestTableDo struct{ gen.DO }

// select * from @@table
// {{where}}
//
//	status in @status
//
// {{end}}
// order by created_at desc
// limit @limit offset @offset
func (t tTestTableDo) GetDataByStatus(status []int, limit int32, offset int32) (result []*sql_model.TTestTable, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("select * from t_test_table ")
	var whereSQL0 strings.Builder
	params = append(params, status)
	whereSQL0.WriteString("status in ? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	params = append(params, limit)
	params = append(params, offset)
	generateSQL.WriteString("order by created_at desc limit ? offset ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t tTestTableDo) Debug() *tTestTableDo {
	return t.withDO(t.DO.Debug())
}

func (t tTestTableDo) WithContext(ctx context.Context) *tTestTableDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tTestTableDo) ReadDB() *tTestTableDo {
	return t.Clauses(dbresolver.Read)
}

func (t tTestTableDo) WriteDB() *tTestTableDo {
	return t.Clauses(dbresolver.Write)
}

func (t tTestTableDo) Session(config *gorm.Session) *tTestTableDo {
	return t.withDO(t.DO.Session(config))
}

func (t tTestTableDo) Clauses(conds ...clause.Expression) *tTestTableDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tTestTableDo) Returning(value interface{}, columns ...string) *tTestTableDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tTestTableDo) Not(conds ...gen.Condition) *tTestTableDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tTestTableDo) Or(conds ...gen.Condition) *tTestTableDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tTestTableDo) Select(conds ...field.Expr) *tTestTableDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tTestTableDo) Where(conds ...gen.Condition) *tTestTableDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tTestTableDo) Order(conds ...field.Expr) *tTestTableDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tTestTableDo) Distinct(cols ...field.Expr) *tTestTableDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tTestTableDo) Omit(cols ...field.Expr) *tTestTableDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tTestTableDo) Join(table schema.Tabler, on ...field.Expr) *tTestTableDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tTestTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tTestTableDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tTestTableDo) RightJoin(table schema.Tabler, on ...field.Expr) *tTestTableDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tTestTableDo) Group(cols ...field.Expr) *tTestTableDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tTestTableDo) Having(conds ...gen.Condition) *tTestTableDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tTestTableDo) Limit(limit int) *tTestTableDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tTestTableDo) Offset(offset int) *tTestTableDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tTestTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tTestTableDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tTestTableDo) Unscoped() *tTestTableDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tTestTableDo) Create(values ...*sql_model.TTestTable) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tTestTableDo) CreateInBatches(values []*sql_model.TTestTable, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tTestTableDo) Save(values ...*sql_model.TTestTable) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tTestTableDo) First() (*sql_model.TTestTable, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.TTestTable), nil
	}
}

func (t tTestTableDo) Take() (*sql_model.TTestTable, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.TTestTable), nil
	}
}

func (t tTestTableDo) Last() (*sql_model.TTestTable, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.TTestTable), nil
	}
}

func (t tTestTableDo) Find() ([]*sql_model.TTestTable, error) {
	result, err := t.DO.Find()
	return result.([]*sql_model.TTestTable), err
}

func (t tTestTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sql_model.TTestTable, err error) {
	buf := make([]*sql_model.TTestTable, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tTestTableDo) FindInBatches(result *[]*sql_model.TTestTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tTestTableDo) Attrs(attrs ...field.AssignExpr) *tTestTableDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tTestTableDo) Assign(attrs ...field.AssignExpr) *tTestTableDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tTestTableDo) Joins(fields ...field.RelationField) *tTestTableDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tTestTableDo) Preload(fields ...field.RelationField) *tTestTableDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tTestTableDo) FirstOrInit() (*sql_model.TTestTable, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.TTestTable), nil
	}
}

func (t tTestTableDo) FirstOrCreate() (*sql_model.TTestTable, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.TTestTable), nil
	}
}

func (t tTestTableDo) FindByPage(offset int, limit int) (result []*sql_model.TTestTable, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tTestTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tTestTableDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tTestTableDo) Delete(models ...*sql_model.TTestTable) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tTestTableDo) withDO(do gen.Dao) *tTestTableDo {
	t.DO = *do.(*gen.DO)
	return t
}
