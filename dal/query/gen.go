// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Coupon:           newCoupon(db, opts...),
		CouponBatch:      newCouponBatch(db, opts...),
		CouponIssue:      newCouponIssue(db, opts...),
		CouponVerify:     newCouponVerify(db, opts...),
		Customer:         newCustomer(db, opts...),
		Settlement:       newSettlement(db, opts...),
		SettlementDetail: newSettlementDetail(db, opts...),
		Supplier:         newSupplier(db, opts...),
		User:             newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Coupon           coupon
	CouponBatch      couponBatch
	CouponIssue      couponIssue
	CouponVerify     couponVerify
	Customer         customer
	Settlement       settlement
	SettlementDetail settlementDetail
	Supplier         supplier
	User             user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Coupon:           q.Coupon.clone(db),
		CouponBatch:      q.CouponBatch.clone(db),
		CouponIssue:      q.CouponIssue.clone(db),
		CouponVerify:     q.CouponVerify.clone(db),
		Customer:         q.Customer.clone(db),
		Settlement:       q.Settlement.clone(db),
		SettlementDetail: q.SettlementDetail.clone(db),
		Supplier:         q.Supplier.clone(db),
		User:             q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Coupon:           q.Coupon.replaceDB(db),
		CouponBatch:      q.CouponBatch.replaceDB(db),
		CouponIssue:      q.CouponIssue.replaceDB(db),
		CouponVerify:     q.CouponVerify.replaceDB(db),
		Customer:         q.Customer.replaceDB(db),
		Settlement:       q.Settlement.replaceDB(db),
		SettlementDetail: q.SettlementDetail.replaceDB(db),
		Supplier:         q.Supplier.replaceDB(db),
		User:             q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Coupon           *couponDo
	CouponBatch      *couponBatchDo
	CouponIssue      *couponIssueDo
	CouponVerify     *couponVerifyDo
	Customer         *customerDo
	Settlement       *settlementDo
	SettlementDetail *settlementDetailDo
	Supplier         *supplierDo
	User             *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Coupon:           q.Coupon.WithContext(ctx),
		CouponBatch:      q.CouponBatch.WithContext(ctx),
		CouponIssue:      q.CouponIssue.WithContext(ctx),
		CouponVerify:     q.CouponVerify.WithContext(ctx),
		Customer:         q.Customer.WithContext(ctx),
		Settlement:       q.Settlement.WithContext(ctx),
		SettlementDetail: q.SettlementDetail.WithContext(ctx),
		Supplier:         q.Supplier.WithContext(ctx),
		User:             q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
