// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"singo/dal/sql_model"
)

func newSettlementDetail(db *gorm.DB, opts ...gen.DOOption) settlementDetail {
	_settlementDetail := settlementDetail{}

	_settlementDetail.settlementDetailDo.UseDB(db, opts...)
	_settlementDetail.settlementDetailDo.UseModel(&sql_model.SettlementDetail{})

	tableName := _settlementDetail.settlementDetailDo.TableName()
	_settlementDetail.ALL = field.NewAsterisk(tableName)
	_settlementDetail.ID = field.NewInt64(tableName, "id")
	_settlementDetail.SettlementID = field.NewInt64(tableName, "settlement_id")
	_settlementDetail.VerifyID = field.NewInt64(tableName, "verify_id")
	_settlementDetail.CouponID = field.NewInt64(tableName, "coupon_id")
	_settlementDetail.CouponCode = field.NewString(tableName, "coupon_code")
	_settlementDetail.VerifyAmount = field.NewFloat64(tableName, "verify_amount")
	_settlementDetail.PlatformFee = field.NewFloat64(tableName, "platform_fee")
	_settlementDetail.SupplierAmount = field.NewFloat64(tableName, "supplier_amount")
	_settlementDetail.VerifyTime = field.NewTime(tableName, "verify_time")
	_settlementDetail.CreateTime = field.NewTime(tableName, "create_time")

	_settlementDetail.fillFieldMap()

	return _settlementDetail
}

type settlementDetail struct {
	settlementDetailDo settlementDetailDo

	ALL            field.Asterisk
	ID             field.Int64
	SettlementID   field.Int64 // ID
	VerifyID       field.Int64 // ID
	CouponID       field.Int64 // ID
	CouponCode     field.String
	VerifyAmount   field.Float64
	PlatformFee    field.Float64
	SupplierAmount field.Float64
	VerifyTime     field.Time
	CreateTime     field.Time

	fieldMap map[string]field.Expr
}

func (s settlementDetail) Table(newTableName string) *settlementDetail {
	s.settlementDetailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s settlementDetail) As(alias string) *settlementDetail {
	s.settlementDetailDo.DO = *(s.settlementDetailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *settlementDetail) updateTableName(table string) *settlementDetail {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SettlementID = field.NewInt64(table, "settlement_id")
	s.VerifyID = field.NewInt64(table, "verify_id")
	s.CouponID = field.NewInt64(table, "coupon_id")
	s.CouponCode = field.NewString(table, "coupon_code")
	s.VerifyAmount = field.NewFloat64(table, "verify_amount")
	s.PlatformFee = field.NewFloat64(table, "platform_fee")
	s.SupplierAmount = field.NewFloat64(table, "supplier_amount")
	s.VerifyTime = field.NewTime(table, "verify_time")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *settlementDetail) WithContext(ctx context.Context) *settlementDetailDo {
	return s.settlementDetailDo.WithContext(ctx)
}

func (s settlementDetail) TableName() string { return s.settlementDetailDo.TableName() }

func (s settlementDetail) Alias() string { return s.settlementDetailDo.Alias() }

func (s settlementDetail) Columns(cols ...field.Expr) gen.Columns {
	return s.settlementDetailDo.Columns(cols...)
}

func (s *settlementDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *settlementDetail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["settlement_id"] = s.SettlementID
	s.fieldMap["verify_id"] = s.VerifyID
	s.fieldMap["coupon_id"] = s.CouponID
	s.fieldMap["coupon_code"] = s.CouponCode
	s.fieldMap["verify_amount"] = s.VerifyAmount
	s.fieldMap["platform_fee"] = s.PlatformFee
	s.fieldMap["supplier_amount"] = s.SupplierAmount
	s.fieldMap["verify_time"] = s.VerifyTime
	s.fieldMap["create_time"] = s.CreateTime
}

func (s settlementDetail) clone(db *gorm.DB) settlementDetail {
	s.settlementDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s settlementDetail) replaceDB(db *gorm.DB) settlementDetail {
	s.settlementDetailDo.ReplaceDB(db)
	return s
}

type settlementDetailDo struct{ gen.DO }

func (s settlementDetailDo) Debug() *settlementDetailDo {
	return s.withDO(s.DO.Debug())
}

func (s settlementDetailDo) WithContext(ctx context.Context) *settlementDetailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s settlementDetailDo) ReadDB() *settlementDetailDo {
	return s.Clauses(dbresolver.Read)
}

func (s settlementDetailDo) WriteDB() *settlementDetailDo {
	return s.Clauses(dbresolver.Write)
}

func (s settlementDetailDo) Session(config *gorm.Session) *settlementDetailDo {
	return s.withDO(s.DO.Session(config))
}

func (s settlementDetailDo) Clauses(conds ...clause.Expression) *settlementDetailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s settlementDetailDo) Returning(value interface{}, columns ...string) *settlementDetailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s settlementDetailDo) Not(conds ...gen.Condition) *settlementDetailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s settlementDetailDo) Or(conds ...gen.Condition) *settlementDetailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s settlementDetailDo) Select(conds ...field.Expr) *settlementDetailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s settlementDetailDo) Where(conds ...gen.Condition) *settlementDetailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s settlementDetailDo) Order(conds ...field.Expr) *settlementDetailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s settlementDetailDo) Distinct(cols ...field.Expr) *settlementDetailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s settlementDetailDo) Omit(cols ...field.Expr) *settlementDetailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s settlementDetailDo) Join(table schema.Tabler, on ...field.Expr) *settlementDetailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s settlementDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *settlementDetailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s settlementDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *settlementDetailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s settlementDetailDo) Group(cols ...field.Expr) *settlementDetailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s settlementDetailDo) Having(conds ...gen.Condition) *settlementDetailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s settlementDetailDo) Limit(limit int) *settlementDetailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s settlementDetailDo) Offset(offset int) *settlementDetailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s settlementDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *settlementDetailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s settlementDetailDo) Unscoped() *settlementDetailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s settlementDetailDo) Create(values ...*sql_model.SettlementDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s settlementDetailDo) CreateInBatches(values []*sql_model.SettlementDetail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s settlementDetailDo) Save(values ...*sql_model.SettlementDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s settlementDetailDo) First() (*sql_model.SettlementDetail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.SettlementDetail), nil
	}
}

func (s settlementDetailDo) Take() (*sql_model.SettlementDetail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.SettlementDetail), nil
	}
}

func (s settlementDetailDo) Last() (*sql_model.SettlementDetail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.SettlementDetail), nil
	}
}

func (s settlementDetailDo) Find() ([]*sql_model.SettlementDetail, error) {
	result, err := s.DO.Find()
	return result.([]*sql_model.SettlementDetail), err
}

func (s settlementDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sql_model.SettlementDetail, err error) {
	buf := make([]*sql_model.SettlementDetail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s settlementDetailDo) FindInBatches(result *[]*sql_model.SettlementDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s settlementDetailDo) Attrs(attrs ...field.AssignExpr) *settlementDetailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s settlementDetailDo) Assign(attrs ...field.AssignExpr) *settlementDetailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s settlementDetailDo) Joins(fields ...field.RelationField) *settlementDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s settlementDetailDo) Preload(fields ...field.RelationField) *settlementDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s settlementDetailDo) FirstOrInit() (*sql_model.SettlementDetail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.SettlementDetail), nil
	}
}

func (s settlementDetailDo) FirstOrCreate() (*sql_model.SettlementDetail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.SettlementDetail), nil
	}
}

func (s settlementDetailDo) FindByPage(offset int, limit int) (result []*sql_model.SettlementDetail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s settlementDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s settlementDetailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s settlementDetailDo) Delete(models ...*sql_model.SettlementDetail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *settlementDetailDo) withDO(do gen.Dao) *settlementDetailDo {
	s.DO = *do.(*gen.DO)
	return s
}
