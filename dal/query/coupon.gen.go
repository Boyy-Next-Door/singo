// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"singo/dal/sql_model"
)

func newCoupon(db *gorm.DB, opts ...gen.DOOption) coupon {
	_coupon := coupon{}

	_coupon.couponDo.UseDB(db, opts...)
	_coupon.couponDo.UseModel(&sql_model.Coupon{})

	tableName := _coupon.couponDo.TableName()
	_coupon.ALL = field.NewAsterisk(tableName)
	_coupon.ID = field.NewInt64(tableName, "id")
	_coupon.Code = field.NewString(tableName, "code")
	_coupon.BatchID = field.NewInt64(tableName, "batch_id")
	_coupon.CustomerID = field.NewInt64(tableName, "customer_id")
	_coupon.CouponType = field.NewInt32(tableName, "coupon_type")
	_coupon.FaceValue = field.NewFloat64(tableName, "face_value")
	_coupon.UserID = field.NewInt64(tableName, "user_id")
	_coupon.SupplierID = field.NewInt64(tableName, "supplier_id")
	_coupon.Status = field.NewInt32(tableName, "status")
	_coupon.GenerateTime = field.NewTime(tableName, "generate_time")
	_coupon.IssueTime = field.NewTime(tableName, "issue_time")
	_coupon.UseTime = field.NewTime(tableName, "use_time")
	_coupon.ValidStart = field.NewTime(tableName, "valid_start")
	_coupon.ValidEnd = field.NewTime(tableName, "valid_end")
	_coupon.CreateTime = field.NewTime(tableName, "create_time")
	_coupon.UpdateTime = field.NewTime(tableName, "update_time")

	_coupon.fillFieldMap()

	return _coupon
}

type coupon struct {
	couponDo couponDo

	ALL          field.Asterisk
	ID           field.Int64
	Code         field.String
	BatchID      field.Int64
	CustomerID   field.Int64 // ID
	CouponType   field.Int32
	FaceValue    field.Float64
	UserID       field.Int64 // ID
	SupplierID   field.Int64 // ID
	Status       field.Int32 // 0: 1: 2: 3:
	GenerateTime field.Time
	IssueTime    field.Time
	UseTime      field.Time
	ValidStart   field.Time
	ValidEnd     field.Time
	CreateTime   field.Time
	UpdateTime   field.Time

	fieldMap map[string]field.Expr
}

func (c coupon) Table(newTableName string) *coupon {
	c.couponDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c coupon) As(alias string) *coupon {
	c.couponDo.DO = *(c.couponDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *coupon) updateTableName(table string) *coupon {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Code = field.NewString(table, "code")
	c.BatchID = field.NewInt64(table, "batch_id")
	c.CustomerID = field.NewInt64(table, "customer_id")
	c.CouponType = field.NewInt32(table, "coupon_type")
	c.FaceValue = field.NewFloat64(table, "face_value")
	c.UserID = field.NewInt64(table, "user_id")
	c.SupplierID = field.NewInt64(table, "supplier_id")
	c.Status = field.NewInt32(table, "status")
	c.GenerateTime = field.NewTime(table, "generate_time")
	c.IssueTime = field.NewTime(table, "issue_time")
	c.UseTime = field.NewTime(table, "use_time")
	c.ValidStart = field.NewTime(table, "valid_start")
	c.ValidEnd = field.NewTime(table, "valid_end")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *coupon) WithContext(ctx context.Context) *couponDo { return c.couponDo.WithContext(ctx) }

func (c coupon) TableName() string { return c.couponDo.TableName() }

func (c coupon) Alias() string { return c.couponDo.Alias() }

func (c coupon) Columns(cols ...field.Expr) gen.Columns { return c.couponDo.Columns(cols...) }

func (c *coupon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *coupon) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 16)
	c.fieldMap["id"] = c.ID
	c.fieldMap["code"] = c.Code
	c.fieldMap["batch_id"] = c.BatchID
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["coupon_type"] = c.CouponType
	c.fieldMap["face_value"] = c.FaceValue
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["supplier_id"] = c.SupplierID
	c.fieldMap["status"] = c.Status
	c.fieldMap["generate_time"] = c.GenerateTime
	c.fieldMap["issue_time"] = c.IssueTime
	c.fieldMap["use_time"] = c.UseTime
	c.fieldMap["valid_start"] = c.ValidStart
	c.fieldMap["valid_end"] = c.ValidEnd
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c coupon) clone(db *gorm.DB) coupon {
	c.couponDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c coupon) replaceDB(db *gorm.DB) coupon {
	c.couponDo.ReplaceDB(db)
	return c
}

type couponDo struct{ gen.DO }

func (c couponDo) Debug() *couponDo {
	return c.withDO(c.DO.Debug())
}

func (c couponDo) WithContext(ctx context.Context) *couponDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c couponDo) ReadDB() *couponDo {
	return c.Clauses(dbresolver.Read)
}

func (c couponDo) WriteDB() *couponDo {
	return c.Clauses(dbresolver.Write)
}

func (c couponDo) Session(config *gorm.Session) *couponDo {
	return c.withDO(c.DO.Session(config))
}

func (c couponDo) Clauses(conds ...clause.Expression) *couponDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c couponDo) Returning(value interface{}, columns ...string) *couponDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c couponDo) Not(conds ...gen.Condition) *couponDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c couponDo) Or(conds ...gen.Condition) *couponDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c couponDo) Select(conds ...field.Expr) *couponDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c couponDo) Where(conds ...gen.Condition) *couponDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c couponDo) Order(conds ...field.Expr) *couponDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c couponDo) Distinct(cols ...field.Expr) *couponDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c couponDo) Omit(cols ...field.Expr) *couponDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c couponDo) Join(table schema.Tabler, on ...field.Expr) *couponDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c couponDo) LeftJoin(table schema.Tabler, on ...field.Expr) *couponDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c couponDo) RightJoin(table schema.Tabler, on ...field.Expr) *couponDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c couponDo) Group(cols ...field.Expr) *couponDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c couponDo) Having(conds ...gen.Condition) *couponDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c couponDo) Limit(limit int) *couponDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c couponDo) Offset(offset int) *couponDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c couponDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *couponDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c couponDo) Unscoped() *couponDo {
	return c.withDO(c.DO.Unscoped())
}

func (c couponDo) Create(values ...*sql_model.Coupon) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c couponDo) CreateInBatches(values []*sql_model.Coupon, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c couponDo) Save(values ...*sql_model.Coupon) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c couponDo) First() (*sql_model.Coupon, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Coupon), nil
	}
}

func (c couponDo) Take() (*sql_model.Coupon, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Coupon), nil
	}
}

func (c couponDo) Last() (*sql_model.Coupon, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Coupon), nil
	}
}

func (c couponDo) Find() ([]*sql_model.Coupon, error) {
	result, err := c.DO.Find()
	return result.([]*sql_model.Coupon), err
}

func (c couponDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sql_model.Coupon, err error) {
	buf := make([]*sql_model.Coupon, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c couponDo) FindInBatches(result *[]*sql_model.Coupon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c couponDo) Attrs(attrs ...field.AssignExpr) *couponDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c couponDo) Assign(attrs ...field.AssignExpr) *couponDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c couponDo) Joins(fields ...field.RelationField) *couponDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c couponDo) Preload(fields ...field.RelationField) *couponDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c couponDo) FirstOrInit() (*sql_model.Coupon, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Coupon), nil
	}
}

func (c couponDo) FirstOrCreate() (*sql_model.Coupon, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Coupon), nil
	}
}

func (c couponDo) FindByPage(offset int, limit int) (result []*sql_model.Coupon, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c couponDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c couponDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c couponDo) Delete(models ...*sql_model.Coupon) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *couponDo) withDO(do gen.Dao) *couponDo {
	c.DO = *do.(*gen.DO)
	return c
}
