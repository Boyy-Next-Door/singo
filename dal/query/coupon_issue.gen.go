// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"singo/dal/sql_model"
)

func newCouponIssue(db *gorm.DB, opts ...gen.DOOption) couponIssue {
	_couponIssue := couponIssue{}

	_couponIssue.couponIssueDo.UseDB(db, opts...)
	_couponIssue.couponIssueDo.UseModel(&sql_model.CouponIssue{})

	tableName := _couponIssue.couponIssueDo.TableName()
	_couponIssue.ALL = field.NewAsterisk(tableName)
	_couponIssue.ID = field.NewInt64(tableName, "id")
	_couponIssue.CouponID = field.NewInt64(tableName, "coupon_id")
	_couponIssue.BatchID = field.NewInt64(tableName, "batch_id")
	_couponIssue.CustomerID = field.NewInt64(tableName, "customer_id")
	_couponIssue.UserID = field.NewInt64(tableName, "user_id")
	_couponIssue.IssueChannel = field.NewInt32(tableName, "issue_channel")
	_couponIssue.IssueTime = field.NewTime(tableName, "issue_time")
	_couponIssue.Operator = field.NewInt64(tableName, "operator")
	_couponIssue.CreateTime = field.NewTime(tableName, "create_time")

	_couponIssue.fillFieldMap()

	return _couponIssue
}

type couponIssue struct {
	couponIssueDo couponIssueDo

	ALL          field.Asterisk
	ID           field.Int64
	CouponID     field.Int64 // ID
	BatchID      field.Int64 // ID
	CustomerID   field.Int64 // ID
	UserID       field.Int64 // ID
	IssueChannel field.Int32 // :1H5 2APP 3 4API
	IssueTime    field.Time
	Operator     field.Int64 // ()
	CreateTime   field.Time

	fieldMap map[string]field.Expr
}

func (c couponIssue) Table(newTableName string) *couponIssue {
	c.couponIssueDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c couponIssue) As(alias string) *couponIssue {
	c.couponIssueDo.DO = *(c.couponIssueDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *couponIssue) updateTableName(table string) *couponIssue {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CouponID = field.NewInt64(table, "coupon_id")
	c.BatchID = field.NewInt64(table, "batch_id")
	c.CustomerID = field.NewInt64(table, "customer_id")
	c.UserID = field.NewInt64(table, "user_id")
	c.IssueChannel = field.NewInt32(table, "issue_channel")
	c.IssueTime = field.NewTime(table, "issue_time")
	c.Operator = field.NewInt64(table, "operator")
	c.CreateTime = field.NewTime(table, "create_time")

	c.fillFieldMap()

	return c
}

func (c *couponIssue) WithContext(ctx context.Context) *couponIssueDo {
	return c.couponIssueDo.WithContext(ctx)
}

func (c couponIssue) TableName() string { return c.couponIssueDo.TableName() }

func (c couponIssue) Alias() string { return c.couponIssueDo.Alias() }

func (c couponIssue) Columns(cols ...field.Expr) gen.Columns { return c.couponIssueDo.Columns(cols...) }

func (c *couponIssue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *couponIssue) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["coupon_id"] = c.CouponID
	c.fieldMap["batch_id"] = c.BatchID
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["issue_channel"] = c.IssueChannel
	c.fieldMap["issue_time"] = c.IssueTime
	c.fieldMap["operator"] = c.Operator
	c.fieldMap["create_time"] = c.CreateTime
}

func (c couponIssue) clone(db *gorm.DB) couponIssue {
	c.couponIssueDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c couponIssue) replaceDB(db *gorm.DB) couponIssue {
	c.couponIssueDo.ReplaceDB(db)
	return c
}

type couponIssueDo struct{ gen.DO }

func (c couponIssueDo) Debug() *couponIssueDo {
	return c.withDO(c.DO.Debug())
}

func (c couponIssueDo) WithContext(ctx context.Context) *couponIssueDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c couponIssueDo) ReadDB() *couponIssueDo {
	return c.Clauses(dbresolver.Read)
}

func (c couponIssueDo) WriteDB() *couponIssueDo {
	return c.Clauses(dbresolver.Write)
}

func (c couponIssueDo) Session(config *gorm.Session) *couponIssueDo {
	return c.withDO(c.DO.Session(config))
}

func (c couponIssueDo) Clauses(conds ...clause.Expression) *couponIssueDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c couponIssueDo) Returning(value interface{}, columns ...string) *couponIssueDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c couponIssueDo) Not(conds ...gen.Condition) *couponIssueDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c couponIssueDo) Or(conds ...gen.Condition) *couponIssueDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c couponIssueDo) Select(conds ...field.Expr) *couponIssueDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c couponIssueDo) Where(conds ...gen.Condition) *couponIssueDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c couponIssueDo) Order(conds ...field.Expr) *couponIssueDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c couponIssueDo) Distinct(cols ...field.Expr) *couponIssueDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c couponIssueDo) Omit(cols ...field.Expr) *couponIssueDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c couponIssueDo) Join(table schema.Tabler, on ...field.Expr) *couponIssueDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c couponIssueDo) LeftJoin(table schema.Tabler, on ...field.Expr) *couponIssueDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c couponIssueDo) RightJoin(table schema.Tabler, on ...field.Expr) *couponIssueDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c couponIssueDo) Group(cols ...field.Expr) *couponIssueDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c couponIssueDo) Having(conds ...gen.Condition) *couponIssueDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c couponIssueDo) Limit(limit int) *couponIssueDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c couponIssueDo) Offset(offset int) *couponIssueDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c couponIssueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *couponIssueDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c couponIssueDo) Unscoped() *couponIssueDo {
	return c.withDO(c.DO.Unscoped())
}

func (c couponIssueDo) Create(values ...*sql_model.CouponIssue) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c couponIssueDo) CreateInBatches(values []*sql_model.CouponIssue, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c couponIssueDo) Save(values ...*sql_model.CouponIssue) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c couponIssueDo) First() (*sql_model.CouponIssue, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponIssue), nil
	}
}

func (c couponIssueDo) Take() (*sql_model.CouponIssue, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponIssue), nil
	}
}

func (c couponIssueDo) Last() (*sql_model.CouponIssue, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponIssue), nil
	}
}

func (c couponIssueDo) Find() ([]*sql_model.CouponIssue, error) {
	result, err := c.DO.Find()
	return result.([]*sql_model.CouponIssue), err
}

func (c couponIssueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sql_model.CouponIssue, err error) {
	buf := make([]*sql_model.CouponIssue, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c couponIssueDo) FindInBatches(result *[]*sql_model.CouponIssue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c couponIssueDo) Attrs(attrs ...field.AssignExpr) *couponIssueDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c couponIssueDo) Assign(attrs ...field.AssignExpr) *couponIssueDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c couponIssueDo) Joins(fields ...field.RelationField) *couponIssueDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c couponIssueDo) Preload(fields ...field.RelationField) *couponIssueDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c couponIssueDo) FirstOrInit() (*sql_model.CouponIssue, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponIssue), nil
	}
}

func (c couponIssueDo) FirstOrCreate() (*sql_model.CouponIssue, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponIssue), nil
	}
}

func (c couponIssueDo) FindByPage(offset int, limit int) (result []*sql_model.CouponIssue, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c couponIssueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c couponIssueDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c couponIssueDo) Delete(models ...*sql_model.CouponIssue) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *couponIssueDo) withDO(do gen.Dao) *couponIssueDo {
	c.DO = *do.(*gen.DO)
	return c
}
