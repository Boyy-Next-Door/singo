// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"singo/dal/sql_model"
)

func newSupplier(db *gorm.DB, opts ...gen.DOOption) supplier {
	_supplier := supplier{}

	_supplier.supplierDo.UseDB(db, opts...)
	_supplier.supplierDo.UseModel(&sql_model.Supplier{})

	tableName := _supplier.supplierDo.TableName()
	_supplier.ALL = field.NewAsterisk(tableName)
	_supplier.ID = field.NewInt64(tableName, "id")
	_supplier.Name = field.NewString(tableName, "name")
	_supplier.Code = field.NewString(tableName, "code")
	_supplier.ContactName = field.NewString(tableName, "contact_name")
	_supplier.ContactPhone = field.NewString(tableName, "contact_phone")
	_supplier.Address = field.NewString(tableName, "address")
	_supplier.Longitude = field.NewFloat64(tableName, "longitude")
	_supplier.Latitude = field.NewFloat64(tableName, "latitude")
	_supplier.BusinessScope = field.NewString(tableName, "business_scope")
	_supplier.BusinessLicense = field.NewString(tableName, "business_license")
	_supplier.BankAccount = field.NewString(tableName, "bank_account")
	_supplier.BankName = field.NewString(tableName, "bank_name")
	_supplier.AccountHolder = field.NewString(tableName, "account_holder")
	_supplier.Status = field.NewInt32(tableName, "status")
	_supplier.CreateTime = field.NewTime(tableName, "create_time")
	_supplier.UpdateTime = field.NewTime(tableName, "update_time")

	_supplier.fillFieldMap()

	return _supplier
}

type supplier struct {
	supplierDo supplierDo

	ALL             field.Asterisk
	ID              field.Int64
	Name            field.String
	Code            field.String
	ContactName     field.String
	ContactPhone    field.String
	Address         field.String
	Longitude       field.Float64
	Latitude        field.Float64
	BusinessScope   field.String
	BusinessLicense field.String
	BankAccount     field.String
	BankName        field.String
	AccountHolder   field.String
	Status          field.Int32 // 0: 1:
	CreateTime      field.Time
	UpdateTime      field.Time

	fieldMap map[string]field.Expr
}

func (s supplier) Table(newTableName string) *supplier {
	s.supplierDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s supplier) As(alias string) *supplier {
	s.supplierDo.DO = *(s.supplierDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *supplier) updateTableName(table string) *supplier {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.ContactName = field.NewString(table, "contact_name")
	s.ContactPhone = field.NewString(table, "contact_phone")
	s.Address = field.NewString(table, "address")
	s.Longitude = field.NewFloat64(table, "longitude")
	s.Latitude = field.NewFloat64(table, "latitude")
	s.BusinessScope = field.NewString(table, "business_scope")
	s.BusinessLicense = field.NewString(table, "business_license")
	s.BankAccount = field.NewString(table, "bank_account")
	s.BankName = field.NewString(table, "bank_name")
	s.AccountHolder = field.NewString(table, "account_holder")
	s.Status = field.NewInt32(table, "status")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")

	s.fillFieldMap()

	return s
}

func (s *supplier) WithContext(ctx context.Context) *supplierDo { return s.supplierDo.WithContext(ctx) }

func (s supplier) TableName() string { return s.supplierDo.TableName() }

func (s supplier) Alias() string { return s.supplierDo.Alias() }

func (s supplier) Columns(cols ...field.Expr) gen.Columns { return s.supplierDo.Columns(cols...) }

func (s *supplier) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *supplier) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["contact_name"] = s.ContactName
	s.fieldMap["contact_phone"] = s.ContactPhone
	s.fieldMap["address"] = s.Address
	s.fieldMap["longitude"] = s.Longitude
	s.fieldMap["latitude"] = s.Latitude
	s.fieldMap["business_scope"] = s.BusinessScope
	s.fieldMap["business_license"] = s.BusinessLicense
	s.fieldMap["bank_account"] = s.BankAccount
	s.fieldMap["bank_name"] = s.BankName
	s.fieldMap["account_holder"] = s.AccountHolder
	s.fieldMap["status"] = s.Status
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
}

func (s supplier) clone(db *gorm.DB) supplier {
	s.supplierDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s supplier) replaceDB(db *gorm.DB) supplier {
	s.supplierDo.ReplaceDB(db)
	return s
}

type supplierDo struct{ gen.DO }

func (s supplierDo) Debug() *supplierDo {
	return s.withDO(s.DO.Debug())
}

func (s supplierDo) WithContext(ctx context.Context) *supplierDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s supplierDo) ReadDB() *supplierDo {
	return s.Clauses(dbresolver.Read)
}

func (s supplierDo) WriteDB() *supplierDo {
	return s.Clauses(dbresolver.Write)
}

func (s supplierDo) Session(config *gorm.Session) *supplierDo {
	return s.withDO(s.DO.Session(config))
}

func (s supplierDo) Clauses(conds ...clause.Expression) *supplierDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s supplierDo) Returning(value interface{}, columns ...string) *supplierDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s supplierDo) Not(conds ...gen.Condition) *supplierDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s supplierDo) Or(conds ...gen.Condition) *supplierDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s supplierDo) Select(conds ...field.Expr) *supplierDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s supplierDo) Where(conds ...gen.Condition) *supplierDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s supplierDo) Order(conds ...field.Expr) *supplierDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s supplierDo) Distinct(cols ...field.Expr) *supplierDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s supplierDo) Omit(cols ...field.Expr) *supplierDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s supplierDo) Join(table schema.Tabler, on ...field.Expr) *supplierDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s supplierDo) LeftJoin(table schema.Tabler, on ...field.Expr) *supplierDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s supplierDo) RightJoin(table schema.Tabler, on ...field.Expr) *supplierDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s supplierDo) Group(cols ...field.Expr) *supplierDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s supplierDo) Having(conds ...gen.Condition) *supplierDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s supplierDo) Limit(limit int) *supplierDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s supplierDo) Offset(offset int) *supplierDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s supplierDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *supplierDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s supplierDo) Unscoped() *supplierDo {
	return s.withDO(s.DO.Unscoped())
}

func (s supplierDo) Create(values ...*sql_model.Supplier) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s supplierDo) CreateInBatches(values []*sql_model.Supplier, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s supplierDo) Save(values ...*sql_model.Supplier) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s supplierDo) First() (*sql_model.Supplier, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Supplier), nil
	}
}

func (s supplierDo) Take() (*sql_model.Supplier, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Supplier), nil
	}
}

func (s supplierDo) Last() (*sql_model.Supplier, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Supplier), nil
	}
}

func (s supplierDo) Find() ([]*sql_model.Supplier, error) {
	result, err := s.DO.Find()
	return result.([]*sql_model.Supplier), err
}

func (s supplierDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sql_model.Supplier, err error) {
	buf := make([]*sql_model.Supplier, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s supplierDo) FindInBatches(result *[]*sql_model.Supplier, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s supplierDo) Attrs(attrs ...field.AssignExpr) *supplierDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s supplierDo) Assign(attrs ...field.AssignExpr) *supplierDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s supplierDo) Joins(fields ...field.RelationField) *supplierDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s supplierDo) Preload(fields ...field.RelationField) *supplierDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s supplierDo) FirstOrInit() (*sql_model.Supplier, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Supplier), nil
	}
}

func (s supplierDo) FirstOrCreate() (*sql_model.Supplier, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.Supplier), nil
	}
}

func (s supplierDo) FindByPage(offset int, limit int) (result []*sql_model.Supplier, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s supplierDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s supplierDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s supplierDo) Delete(models ...*sql_model.Supplier) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *supplierDo) withDO(do gen.Dao) *supplierDo {
	s.DO = *do.(*gen.DO)
	return s
}
