// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"singo/dal/sql_model"
)

func newCouponBatch(db *gorm.DB, opts ...gen.DOOption) couponBatch {
	_couponBatch := couponBatch{}

	_couponBatch.couponBatchDo.UseDB(db, opts...)
	_couponBatch.couponBatchDo.UseModel(&sql_model.CouponBatch{})

	tableName := _couponBatch.couponBatchDo.TableName()
	_couponBatch.ALL = field.NewAsterisk(tableName)
	_couponBatch.ID = field.NewInt64(tableName, "id")
	_couponBatch.BatchNo = field.NewString(tableName, "batch_no")
	_couponBatch.CustomerID = field.NewInt64(tableName, "customer_id")
	_couponBatch.Name = field.NewString(tableName, "name")
	_couponBatch.CouponType = field.NewInt32(tableName, "coupon_type")
	_couponBatch.FaceValue = field.NewFloat64(tableName, "face_value")
	_couponBatch.TotalCount = field.NewInt32(tableName, "total_count")
	_couponBatch.RemainingCount = field.NewInt32(tableName, "remaining_count")
	_couponBatch.ValidStart = field.NewTime(tableName, "valid_start")
	_couponBatch.ValidEnd = field.NewTime(tableName, "valid_end")
	_couponBatch.Status = field.NewInt32(tableName, "status")
	_couponBatch.CreateUser = field.NewInt64(tableName, "create_user")
	_couponBatch.CreateTime = field.NewTime(tableName, "create_time")
	_couponBatch.UpdateTime = field.NewTime(tableName, "update_time")

	_couponBatch.fillFieldMap()

	return _couponBatch
}

type couponBatch struct {
	couponBatchDo couponBatchDo

	ALL            field.Asterisk
	ID             field.Int64
	BatchNo        field.String
	CustomerID     field.Int64
	Name           field.String
	CouponType     field.Int32 // :1 2 3...
	FaceValue      field.Float64
	TotalCount     field.Int32
	RemainingCount field.Int32
	ValidStart     field.Time
	ValidEnd       field.Time
	Status         field.Int32 // 0: 1: 2: 3:
	CreateUser     field.Int64
	CreateTime     field.Time
	UpdateTime     field.Time

	fieldMap map[string]field.Expr
}

func (c couponBatch) Table(newTableName string) *couponBatch {
	c.couponBatchDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c couponBatch) As(alias string) *couponBatch {
	c.couponBatchDo.DO = *(c.couponBatchDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *couponBatch) updateTableName(table string) *couponBatch {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.BatchNo = field.NewString(table, "batch_no")
	c.CustomerID = field.NewInt64(table, "customer_id")
	c.Name = field.NewString(table, "name")
	c.CouponType = field.NewInt32(table, "coupon_type")
	c.FaceValue = field.NewFloat64(table, "face_value")
	c.TotalCount = field.NewInt32(table, "total_count")
	c.RemainingCount = field.NewInt32(table, "remaining_count")
	c.ValidStart = field.NewTime(table, "valid_start")
	c.ValidEnd = field.NewTime(table, "valid_end")
	c.Status = field.NewInt32(table, "status")
	c.CreateUser = field.NewInt64(table, "create_user")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *couponBatch) WithContext(ctx context.Context) *couponBatchDo {
	return c.couponBatchDo.WithContext(ctx)
}

func (c couponBatch) TableName() string { return c.couponBatchDo.TableName() }

func (c couponBatch) Alias() string { return c.couponBatchDo.Alias() }

func (c couponBatch) Columns(cols ...field.Expr) gen.Columns { return c.couponBatchDo.Columns(cols...) }

func (c *couponBatch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *couponBatch) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["batch_no"] = c.BatchNo
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["name"] = c.Name
	c.fieldMap["coupon_type"] = c.CouponType
	c.fieldMap["face_value"] = c.FaceValue
	c.fieldMap["total_count"] = c.TotalCount
	c.fieldMap["remaining_count"] = c.RemainingCount
	c.fieldMap["valid_start"] = c.ValidStart
	c.fieldMap["valid_end"] = c.ValidEnd
	c.fieldMap["status"] = c.Status
	c.fieldMap["create_user"] = c.CreateUser
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c couponBatch) clone(db *gorm.DB) couponBatch {
	c.couponBatchDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c couponBatch) replaceDB(db *gorm.DB) couponBatch {
	c.couponBatchDo.ReplaceDB(db)
	return c
}

type couponBatchDo struct{ gen.DO }

func (c couponBatchDo) Debug() *couponBatchDo {
	return c.withDO(c.DO.Debug())
}

func (c couponBatchDo) WithContext(ctx context.Context) *couponBatchDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c couponBatchDo) ReadDB() *couponBatchDo {
	return c.Clauses(dbresolver.Read)
}

func (c couponBatchDo) WriteDB() *couponBatchDo {
	return c.Clauses(dbresolver.Write)
}

func (c couponBatchDo) Session(config *gorm.Session) *couponBatchDo {
	return c.withDO(c.DO.Session(config))
}

func (c couponBatchDo) Clauses(conds ...clause.Expression) *couponBatchDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c couponBatchDo) Returning(value interface{}, columns ...string) *couponBatchDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c couponBatchDo) Not(conds ...gen.Condition) *couponBatchDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c couponBatchDo) Or(conds ...gen.Condition) *couponBatchDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c couponBatchDo) Select(conds ...field.Expr) *couponBatchDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c couponBatchDo) Where(conds ...gen.Condition) *couponBatchDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c couponBatchDo) Order(conds ...field.Expr) *couponBatchDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c couponBatchDo) Distinct(cols ...field.Expr) *couponBatchDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c couponBatchDo) Omit(cols ...field.Expr) *couponBatchDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c couponBatchDo) Join(table schema.Tabler, on ...field.Expr) *couponBatchDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c couponBatchDo) LeftJoin(table schema.Tabler, on ...field.Expr) *couponBatchDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c couponBatchDo) RightJoin(table schema.Tabler, on ...field.Expr) *couponBatchDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c couponBatchDo) Group(cols ...field.Expr) *couponBatchDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c couponBatchDo) Having(conds ...gen.Condition) *couponBatchDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c couponBatchDo) Limit(limit int) *couponBatchDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c couponBatchDo) Offset(offset int) *couponBatchDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c couponBatchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *couponBatchDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c couponBatchDo) Unscoped() *couponBatchDo {
	return c.withDO(c.DO.Unscoped())
}

func (c couponBatchDo) Create(values ...*sql_model.CouponBatch) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c couponBatchDo) CreateInBatches(values []*sql_model.CouponBatch, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c couponBatchDo) Save(values ...*sql_model.CouponBatch) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c couponBatchDo) First() (*sql_model.CouponBatch, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponBatch), nil
	}
}

func (c couponBatchDo) Take() (*sql_model.CouponBatch, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponBatch), nil
	}
}

func (c couponBatchDo) Last() (*sql_model.CouponBatch, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponBatch), nil
	}
}

func (c couponBatchDo) Find() ([]*sql_model.CouponBatch, error) {
	result, err := c.DO.Find()
	return result.([]*sql_model.CouponBatch), err
}

func (c couponBatchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sql_model.CouponBatch, err error) {
	buf := make([]*sql_model.CouponBatch, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c couponBatchDo) FindInBatches(result *[]*sql_model.CouponBatch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c couponBatchDo) Attrs(attrs ...field.AssignExpr) *couponBatchDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c couponBatchDo) Assign(attrs ...field.AssignExpr) *couponBatchDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c couponBatchDo) Joins(fields ...field.RelationField) *couponBatchDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c couponBatchDo) Preload(fields ...field.RelationField) *couponBatchDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c couponBatchDo) FirstOrInit() (*sql_model.CouponBatch, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponBatch), nil
	}
}

func (c couponBatchDo) FirstOrCreate() (*sql_model.CouponBatch, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sql_model.CouponBatch), nil
	}
}

func (c couponBatchDo) FindByPage(offset int, limit int) (result []*sql_model.CouponBatch, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c couponBatchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c couponBatchDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c couponBatchDo) Delete(models ...*sql_model.CouponBatch) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *couponBatchDo) withDO(do gen.Dao) *couponBatchDo {
	c.DO = *do.(*gen.DO)
	return c
}
